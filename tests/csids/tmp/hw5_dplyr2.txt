HW5: dplyr2

Do NOT use a `for`, `while`, or `repeat` loop!
Whenever using `select()`, make sure to write `dplyr::select()` to avoid
conflicts with other packages.

1. Load the `tidyverse` package and use `read_csv` to load
   `/course/data/nations.csv` and assign it to a tibble `nations`.

   To check your answer:

   The output of `print(nations, n = 5)` is

   ```
   # A tibble: 5,697 x 11
     iso2c iso3c country  year gdp_percap life_expect population
     <chr> <chr> <chr>   <dbl>      <dbl>       <dbl>      <dbl>
   1 AD    AND   Andorra  2007         NA          NA      82683
   2 AD    AND   Andorra  2011         NA          NA      83751
   3 AD    AND   Andorra  2013         NA          NA      80788
   4 AD    AND   Andorra  2008         NA          NA      83861
   5 AD    AND   Andorra  1992         NA          NA      58888
   # … with 5,692 more rows, and 4 more variables: birth_rate <dbl>,
   #   neonat_mortal_rate <dbl>, region <chr>, income <chr>
   ```





2. From the `nations` tibble, extract a tibble `longevity` of dimension
   175 x 5 that contains the `country`, `gdp_percap`, `life_expect`,
   `population` and `region` columns.
   The dataset should be filtered for the observations in 2016 where the
   columns `life_expect` and `gdp_percap` are not NA.
   To do this, you can use
     - `filter()` to select rows with `year` as `2016` and non-NA
       `life_expect` and `gdp_percap`,
     - `dplyr::select()` to include only `country`, `gdp_percap`,
       `life_expect`, `population` and `region`
   Note: by doing `dplyr::`, we enforce the use of `dplyr`'s `select` to
   resolve function conflicts with other packages such as `MASS`.

   To check your answer:

   The output of `print(longevity, n = 5)` is

   ```
   # A tibble: 175 x 5
     country         gdp_percap life_expect population region
     <chr>                <dbl>       <dbl>      <dbl> <chr>
   1 United Arab Em…     72400.        77.3    9269612 Middle East & Nor…
   2 Afghanistan          1944.        63.7   34656032 South Asia
   3 Antigua and Ba…     22661.        76.4     100963 Latin America & C…
   4 Albania             11540.        78.3    2876101 Europe & Central …
   5 Armenia              8833.        74.6    2924816 Europe & Central …
   # … with 170 more rows
   ```





3. From `longevity`, extract a new tibble `ea_na_75_85` of dimension 15 x 5
   that contains the `country`, `gdp_percap`, `life_expect`, `population` and
   `region` columns.
   The dataset should be filtered for countries in `"East Asia & Pacific"` or
   `"North America"`, with `life_expect` between 75 and 85 included.
   It should be sorted by decreasing `life_expect`.
   To do this, you can use
     - `filter()` to select rows with `region` as `"East Asia & Pacific"` or
   `"North America"` and `life_expect` between 75 and 85 included,
     - `arrange()` to arrange data by descending order of `life_expect`.

   To check your answer:

   The output of `print(ea_na_75_85, n = 5)` is

   ```
   # A tibble: 15 x 5
     country           gdp_percap life_expect population region
     <chr>                  <dbl>       <dbl>      <dbl> <chr>
   1 Hong Kong SAR, C…     58618.        84.2    7336600 East Asia & Pac…
   2 Japan                 42281.        84.0  126994511 East Asia & Pac…
   3 Macao SAR, China     105420.        83.8     612167 East Asia & Pac…
   4 Singapore             87833.        82.8    5607283 East Asia & Pac…
   5 Australia             46012.        82.5   24210809 East Asia & Pac…
   # … with 10 more rows
   ```





4. From `longevity` again, extract a tibble `top_10_perc_us` of dimension
   19 x 6 that contains the `country`, `gdp_percap`, `life_expect`,
   `population`, `region` and `perc_rank` columns, where
   `perc_rank` is a new column corresponding to the percentile rank for
   `life_expect` (hint: use `percent_rank()`). The dataset should be sorted
   by decreasing `perc_rank` and filtered for countries with top 10%
   `perc_rank` (i.e., `perc_rank` >= 0.9), plus `"United States"` (whose rank
   may lie outside the top 10%).
   To do this, you can use
     - `mutate()` to create a new column `perc_rank`,
     - `arrange()` to sort the result by `perc_rank` descendingly,
     - `filter()` to find the countries in the top 10% `perc_rank` plus
       `"United States"`.

   To check your answer:

   The output of `print(top_10_perc_us, n = 5)` is

   ```
   # A tibble: 19 x 6
     country      gdp_percap life_expect population region      perc_rank
     <chr>             <dbl>       <dbl>      <dbl> <chr>           <dbl>
   1 Hong Kong S…     58618.        84.2    7336600 East Asia …     1.
   2 Japan            42281.        84.0  126994511 East Asia …     0.994
   3 Macao SAR, …    105420.        83.8     612167 East Asia …     0.989
   4 Switzerland      63889.        82.9    8372413 Europe & C…     0.983
   5 Spain            36305.        82.8   46484533 Europe & C…     0.977
   # … with 14 more rows
   ```





5. From `nations`, extract a tibble `gdp_by_region` of dimension 189 x 3
   that contains the `region`, `year` and `total_gdp` columns, where
   `total_gdp` is a new column containing the total real GDP by
   `region` and `year`, with real GDP being the product of `gdp_percap` and
   `population`. The unit of `total_gdp` should be trillions of dollars
   (hint: divide the result by 1000000000000).
   To do this, you can use
     - `mutate()` to create a new column `gdp` to find the total GDP
       (i.e., the product of `gdp_percap` and `population`),
     - `group_by()` to group data by `region` and `year`,
     - `summarize()` to `sum` the values of the total GDP and convert
       in trillions of dollars (hint: set `na.rm = TRUE` when taking sum
       since there might be NA's),

   To check your answer:

   The output of `print(gdp_by_region, n = 5)` is

   ```
   # A tibble: 189 x 3
   # Groups:   region [7]
     region               year total_gdp
     <chr>               <dbl>     <dbl>
   1 East Asia & Pacific  1990      5.59
   2 East Asia & Pacific  1991      6.10
   3 East Asia & Pacific  1992      6.57
   4 East Asia & Pacific  1993      7.11
   5 East Asia & Pacific  1994      7.71
   # … with 184 more rows
   ```





6. From `nations`, extract a tibble `p_countries` of dimension 5 x 2
   that contains `income` and `p` columns. The dataset should be
   contain data from 2016 and `p` should be a new column
   containing the proportions of countries with `life_expect` over 70 by
   `income`.
   Hint: count for countries that satisfy the condition, then divide
   by the total count using `n()`.
   To do this, you can use
     - `filter()` filter select rows corresponding to 2016,
     - `group_by()` to group data by `income`,
     - `summarize()` to find the proportions of countries with `life_expect`
       over 70. (hint: set `na.rm = TRUE` when taking sum
       since there might be NA's),

   To check your answer:

   The output of `print(p_countries, n = 5)` is

   ```
   # A tibble: 5 x 2
     income                  p
     <chr>               <dbl>
   1 High income         0.841
   2 Low income          0.118
   3 Lower middle income 0.426
   4 Not classified      0
   5 Upper middle income 0.849
   ```





