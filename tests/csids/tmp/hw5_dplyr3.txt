HW5: dplyr3

Do NOT use a `for`, `while`, or `repeat` loop!
Whenever using `select()`, make sure to write `dplyr::select()` to avoid
conflicts with other packages.

1. Load the `tidyverse` package as well as the `airquality` dataset and
   assign it to a tibble `airquality` using `as_tibble`.

   To check your answer:

   The output of `print(airquality, n = 5)` is

   ```
   # A tibble: 153 x 6
     Ozone Solar.R  Wind  Temp Month   Day
     <int>   <int> <dbl> <int> <int> <int>
   1    41     190   7.4    67     5     1
   2    36     118   8      72     5     2
   3    12     149  12.6    74     5     3
   4    18     313  11.5    62     5     4
   5    NA      NA  14.3    56     5     5
   # … with 148 more rows
   ```





2. Replace the NA values in `Ozone` column from `airquality` by the mean
   of the non NA values and save the result into tibble
   `airquality_replace_na`.
   To do that, you can use
     - `replace_na` to replace the NA values with `mean` to compute the mean
       for the non NA values.

   To check your answer:

   The output of `print(airquality_replace_na, n = 5)` is

   ```
   # A tibble: 153 x 6
     Ozone Solar.R  Wind  Temp Month   Day
     <dbl>   <int> <dbl> <int> <int> <int>
   1  41       190   7.4    67     5     1
   2  36       118   8      72     5     2
   3  12       149  12.6    74     5     3
   4  18       313  11.5    62     5     4
   5  42.1      NA  14.3    56     5     5
   # … with 148 more rows
   ```





3. Remove the rows that contain NA values in `Solar.R` column from
   `airquality_replace_na` and save the result into `airquality_remove_na`.
   To do that, you can use `drop_na`.

   To check your answer:

   The output of `print(airquality_remove_na, n = 5)` is

   ```
   # A tibble: 146 x 6
     Ozone Solar.R  Wind  Temp Month   Day
     <dbl>   <int> <dbl> <int> <int> <int>
   1    41     190   7.4    67     5     1
   2    36     118   8      72     5     2
   3    12     149  12.6    74     5     3
   4    18     313  11.5    62     5     4
   5    23     299   8.6    65     5     7
   # … with 141 more rows
   ```





4. Extract the columns `Wind`, `Temp`, `Month`, and `Day` from
   `airquality_remove_na`` and save the result into
   `airquality_selected`. To do that, you can use `select`.

   To check your answer:

   The output of `print(airquality_selected, n = 5)` is

   ```
   # A tibble: 146 x 4
      Wind  Temp Month   Day
     <dbl> <int> <int> <int>
   1   7.4    67     5     1
   2   8      72     5     2
   3  12.6    74     5     3
   4  11.5    62     5     4
   5   8.6    65     5     7
   # … with 141 more rows
   ```





5. Extract from `airquality_selected` rows that correspond to data from July
   onwards and save the result into `airquality_filtered`.
   To do that, you can use `filter`.

   To check your answer:

   The output of `print(airquality_filtered, n = 5)` is

   ```
   # A tibble: 89 x 4
      Wind  Temp Month   Day
     <dbl> <int> <int> <int>
   1   4.1    84     7     1
   2   9.2    85     7     2
   3   9.2    81     7     3
   4  10.9    84     7     4
   5   4.6    83     7     5
   # … with 84 more rows
   ```





6. From `airquality_filtered`, create a new tibble `airquality_wind`
   by modifying the `Wind` column so that:
     - when the value is in `[1,9)`, the new value is `7.4`;
     - when the value is in `[9,20]`, the new value is `11.5`;
     - otherwise replace the value by `21`.
   Save the result into `airquality_wind`.
   To do that, you can combine
     - `mutate` to modify the `Wind` column,
     - and `case_when` as a generalized vectorized if.

   To check your answer:

   The output of `print(airquality_wind, n = 5)` is

   ```
   # A tibble: 89 x 4
      Wind  Temp Month   Day
     <dbl> <int> <int> <int>
   1   7.4    84     7     1
   2  11.5    85     7     2
   3  11.5    81     7     3
   4  11.5    84     7     4
   5   7.4    83     7     5
   # … with 84 more rows
   ```





7. From `airquality_wind`, create a new tibble `airquality_temp`
   by modifying the `Temp` column so that tthe temperature is in Celsius
   instead of Fahrenheit.
   Note: you can use the following conversion `(x - 32) * 5 / 9`.

   To check your answer:

   The output of `print(airquality_temp, n = 5)` is

   ```
   # A tibble: 89 x 4
      Wind  Temp Month   Day
     <dbl> <dbl> <int> <int>
   1   7.4  28.9     7     1
   2  11.5  29.4     7     2
   3  11.5  27.2     7     3
   4  11.5  28.9     7     4
   5   7.4  28.3     7     5
   # … with 84 more rows
   ```





8. Compute the average temperature for each month from `airquality_temp` and
   save the result into `airquality_mean_temp`, where the column
   corresponding to the temperature is called `mean_temp`.
   To do that, you can use
    - `group_by` to group by `month`,
    - `summarize` and `mean` to compute mean values.

   To check your answer:

   The output of `print(airquality_mean_temp, n = 5)` is

   ```
   # A tibble: 3 x 2
     Month mean_temp
     <int>     <dbl>
   1     7      28.8
   2     8      28.8
   3     9      24.9
   ```





