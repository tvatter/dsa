HW5: tidyr4

Do NOT use a `for`, `while`, or `repeat` loop!
Whenever using `select()`, make sure to write `dplyr::select()` to avoid
conflicts with other packages.

1. Load the `tidyverse` package and use `read_csv` to load
   `/course/data/mobility.csv` and assign it to a tibble `mobility`.

   To check your answer:

   The output of `print(mobility, n = 5)` is

   ```
   # A tibble: 729 x 6
     Name           Mobility State Commute Longitude Latitude
     <chr>             <dbl> <chr>   <dbl>     <dbl>    <dbl>
   1 Johnson City     0.0622 TN      0.325     -82.4     36.5
   2 Morristown       0.0537 TN      0.276     -83.4     36.1
   3 Middlesborough   0.0726 TN      0.359     -83.5     36.6
   4 Knoxville        0.0563 TN      0.269     -84.2     36.0
   5 Winston-Salem    0.0448 NC      0.292     -80.5     36.1
   # … with 724 more rows
   ```





2. Compute the number of appearance of state names from column `State`,
   order the column in alphabetical order using `arrange`,
   and store the result into `count_by_state`.
   To do that, you can use
     - `group_by` to group by state,
     - `count` to count values,
     - `arrange` to the order the result.

   To check your answer:

   The output of `print(count_by_state, n = 5)` is

   ```
   # A tibble: 51 x 2
   # Groups:   State [51]
     State     n
     <chr> <int>
   1 AK       13
   2 AL       14
   3 AR       18
   4 AZ        5
   5 CA       18
   # … with 46 more rows
   ```





3. For each state, compute the column mean and standard deviation for
   column `Commute` and `Mobility`.
   Store the result in tibble `stats_by_state`, where the five columns are
   `State`, `Commute_mean`, `Mobility_mean`, `Commute_sd`, and `Mobility_sd`.
   To do that, you can use
     - `group_by` to group by state,
     - `summarize_at` to get the statistics for the `Commute` and
       `Mobility` columns, along with `mean` to compute mean and `sd` to
       compute standard deviation.

   To check your answer:

   The output of `print(stats_by_state, n = 5)` is

   ```
   # A tibble: 51 x 5
     State Commute_mean Mobility_mean Commute_sd Mobility_sd
     <chr>        <dbl>         <dbl>      <dbl>       <dbl>
   1 AK           0.726        0.110      0.183       0.0396
   2 AL           0.328        0.0540     0.0514      0.0156
   3 AR           0.415        0.0724     0.0553      0.0236
   4 AZ           0.398        0.0758     0.125       0.0249
   5 CA           0.403        0.101      0.133       0.0162
   # … with 46 more rows
   ```





4. Transform the `stats_by_state` into a longer form containing columns
   `State`, `Variable`, `Stat`, and `Value`, and store the result
   into `stats_by_state_longer`.
   To do that, you can use
     - `pivot_longer` to gather the column `Commute_mean`, `Mobility_mean`,
       `Commute_sd`, and `Mobility_sd`,
     - `separate` to separate the variable name column from the result of
       `pivot_longer`.

   To check your answer:

   The output of `print(stats_by_state_longer, n = 5)` is

   ```
   # A tibble: 204 x 4
     State Variable Stat   Value
     <chr> <chr>    <chr>  <dbl>
   1 AK    Commute  mean  0.726
   2 AK    Mobility mean  0.110
   3 AK    Commute  sd    0.183
   4 AK    Mobility sd    0.0396
   5 AL    Commute  mean  0.328
   # … with 199 more rows
   ```





5. From `stats_by_state_longer`, extract a tibble `stats_by_state_ranked`
   which contains columns `State`, `Commute`, and `Mobility`, where
     - the column `Commute` contains the percentage rank of the mean of
       the `Commute` variable for each state,
     - and the column `Mobility` contains the percentage rank of the mean
       of the `Mobility` variance for each state.
   Order the result by descending `Commute`, and then descending `Mobility`
   to break ties if two `Commute` ranks are equal.
   To do that, you can use
     - `filter` to select the rows that contain mean values,
     - `select` to remove the `Stat` column,
     - `group_by` to group by `Commute` and `Mobility`,
     - `mutate` and `percent_rank` to get the percentage rank,
     - `pivot_wider` to spread the result into wider form,
     - `arrange` to order the result.

   To check your answer:

   The output of `print(stats_by_state_ranked, n = 5)` is

   ```
   # A tibble: 51 x 3
     State Commute Mobility
     <chr>   <dbl>    <dbl>
   1 AK       1.       0.66
   2 MT       0.98     0.92
   3 ND       0.96     1.
   4 SD       0.94     0.9
   5 WY       0.92     0.98
   # … with 46 more rows
   ```





6. Concatenate the mean `Latitude` and mean `Longitude` for each state by `_`
   and save the result into tibble `coordinates`. Before concatenating, round
   the mean `Latitude` to 3 digits and mean `Longitude` to 2 digits.
   To do that, you can use
     - `group_by` to group by `State`,
     - `summarize` and `mean `to get mean values,
     - `round` to round the mean values,
     - `unite` to paste the columns together.

   To check your answer:

   The output of `print(coordinates, n = 5)` is

   ```
   # A tibble: 51 x 2
     State Coordinates
     <chr> <chr>
   1 AK    60.749_-150.9
   2 AL    32.911_-86.74
   3 AR    35.003_-92.3
   4 AZ    33.924_-110.66
   5 CA    37.696_-120.34
   # … with 46 more rows
   ```





